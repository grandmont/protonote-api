generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/generated"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  email        String        @unique
  name         String?
  picture      String?
  timeZone     String?
  provider     AuthProvider
  protos       Proto[]
  integrations Integration[]
}

model Proto {
  id           Int                       @id @default(autoincrement())
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @default(now())
  title        String?
  description  String?
  dateString   String?
  user         User?                     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId       Int?
  integrations IntegrationDataOnProtos[]
  deezer       DeezerDataOnProtos[]
}

model IntegrationDataOnProtos {
  proto             Proto           @relation(fields: [protoId], references: [id])
  protoId           Int
  integrationData   IntegrationData @relation(fields: [integrationDataId], references: [id])
  integrationDataId Int
  assignedAt        DateTime        @default(now())

  @@id([protoId, integrationDataId])
}

model DeezerDataOnProtos {
  proto        Proto      @relation(fields: [protoId], references: [id])
  protoId      Int
  deezerData   DeezerData @relation(fields: [deezerDataId], references: [id])
  deezerDataId Int
  assignedAt   DateTime   @default(now())

  @@id([protoId, deezerDataId])
}

model DeezerData {
  id         Int                  @id @default(autoincrement())
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @default(now())
  externalId String?
  search     String
  data       String
  protos     DeezerDataOnProtos[]
}

model IntegrationData {
  id         Int                       @id @default(autoincrement())
  createdAt  DateTime                  @default(now())
  updatedAt  DateTime                  @default(now())
  externalId String?
  search     String
  data       String
  protos     IntegrationDataOnProtos[]
}

model Integration {
  id           Int                  @id @default(autoincrement())
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @default(now())
  provider     IntegrationProvider?
  status       IntegrationStatus?
  refreshToken String?
  user         User?                @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId       Int?
}

enum AuthProvider {
  GOOGLE
  APPLE
}

enum IntegrationProvider {
  SPOTIFY
  DEEZER
}

enum IntegrationStatus {
  CONNECTED
  DISCONNECTED
}
